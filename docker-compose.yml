#
# University of Pisa - Advanced Software Engineering - 2021-2022
# Main docker-compose File
# Project:
#┌─────────────────────────────────────────────────────────────────────────────────────────┐ 
#│  __  __                                  _                 ____        _   _   _        │ 
#│ |  \/  | ___  ___ ___  __ _  __ _  ___  (_)_ __     __ _  | __ )  ___ | |_| |_| | ___   │
#│ | |\/| |/ _ \/ __/ __|/ _` |/ _` |/ _ \ | | '_ \   / _` | |  _ \ / _ \| __| __| |/ _ \  │
#│ | |  | |  __/\__ \__ \ (_| | (_| |  __/ | | | | | | (_| | | |_) | (_) | |_| |_| |  __/  │ 
#│ |_|  |_|\___||___/___/\__,_|\__, |\___| |_|_| |_|  \__,_| |____/ \___/ \__|\__|_|\___|  │ 
#│                              |___/                                                      │ 
#└─────────────────────────────────────────────────────────────────────────────────────────┘

version: '3.8'

services:
  
  redis:
    image: "redis:alpine"
    command: --port 6379
    ports:
      - "6379:6379"

  # -------------------------------------------- #
  # Starting with API Gateway and Load Balancer  #
  # -------------------------------------------- #
 
  nginx_lb_orchestrator:
    #
    # Nginx Orchestrator instance
    #
    container_name: load_balancer_orchestrator
    restart: always
    build: ./mmiab-api-gateway/nginx-orchestrator
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # WARNING: with Winzozz it does not work, but we need it!
      - nginx_conf:/etc/nginx/conf.d

  nginx_lb:
    #
    # Nginx single instance
    #
    container_name: load_balancer
    restart: always
    build: ./mmiab-api-gateway/nginx
    labels:
      - mib.nginx_lb
    volumes:
      - nginx_conf:/etc/nginx/conf.d
      - ./mmiab-api-gateway/mib/static:/static
    ports:
      - "80:80"

  api_gateway:
    #
    # API Gateway
    #
    # ! ! ! WARNING ! ! !
    # DO NOT set the container_name attribute and ports mapping
    # to allow the replication.
    #
    restart: always
    build: ./mmiab-api-gateway
    volumes:
      - ./mmiab-api-gateway/mib/static:/static
      - ./mmiab-api-gateway:/app
    env_file:
      - gateway.conf
    environment:
      - USERS_MS_HOST=users_ms_worker
      - NOTIFICATIONS_MS_HOST=notifications_ms_worker
      - LOTTERY_MS_HOST=lottery_ms_worker
      - MESSAGES_MS_HOST=messages_ms_worker
    # - FLASK_ENV=development
    labels:
      - mib.api_gateway_worker

  # -------------------------------------------- #
  # Common Services                              #
  # -------------------------------------------- #
  
  #
  # specify here the common services between your
  # microservices
  #


  # -------------------------------------------- #
  # Users Microservice                           #
  # -------------------------------------------- #
  users_db:
    image: postgres:13
    restart: unless-stopped
        # ports:
        #   # this is only for development purpose
        #   - "5342:5342"
    env_file:
      - users_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
  users_ms_migrations:
    #
    # Users Microservice Migrations
    #
    build: ./mmiab-user
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_db
    restart: on-failure
    command: flask db upgrade
    depends_on:
      users_db:
        condition: service_healthy
  users_ms_worker:
    
    #
    # Users Microservice Worker node
    #
    build: ./mmiab-user
    restart: on-failure
    volumes:
      - ./mmiab-user/mib/static:/static
      - ./mmiab-user:/app
    env_file:
      - users_ms.conf
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=users_db
    # - FLASK_ENV=development
    depends_on:
        users_db:
          condition: service_healthy
    

  users_bg:
      depends_on:
        - redis
        - users_ms_worker
        - users_db
      build: ./mmiab-user
      volumes:
        - ./mmiab-user:/app

      env_file:
        - users_ms.conf
      environment:
        - POSTGRES_HOST=users_db
        - REDIS_HOST=redis
      command: python3 -u subscribers.py
      links:
        - redis
  # -------------------------------------------- #
  # Notification Microservice                    #
  # -------------------------------------------- #

  notifications_db:
    image: postgres:13
    restart: unless-stopped
  # ports:
  #   # this is only for development purpose
  #   - "5343:5343"
    env_file:
      - notifications_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  notification_ms_migrations:
    #
    # Users Microservice Migrations
    #
    build: ./mmiab-notification
    env_file:
      - notifications_ms.conf
    environment:
      - POSTGRES_HOST=notifications_db
    restart: on-failure
    command: flask db upgrade
    depends_on:
      notifications_db:
        condition: service_healthy
  notifications_ms_worker:
    #
    # Notification Microservice Worker node
    #
    build: ./mmiab-notification
    restart: on-failure
    volumes:
      - ./mmiab-notification:/app
    env_file:
      - notifications_ms.conf
    environment:
      - POSTGRES_HOST=notifications_db
    # - POSTGRES_PORT=5343
      - USERS_MS_HOST=users_ms_worker
    # - FLASK_ENV=development
    depends_on:
      notifications_db:
        condition: service_healthy
  notification_bg:
    depends_on:
      - redis
      - notifications_ms_worker
      - notifications_db
    build: ./mmiab-notification
    env_file:
      - notifications_ms.conf
    environment:
      - POSTGRES_HOST=notifications_db
    # - POSTGRES_PORT=5343
      - REDIS_HOST=redis
    command: python3 -u subscribers.py
    links:
      - redis
            
# # -------------------------------------------- #
# # Lottery Microservice                    #
# # -------------------------------------------- #
  lottery_db:
    image: postgres:13
    restart: unless-stopped
#   ports:
#     # this is only for development purpose
#     - "5344:5344"
    env_file:
      - lottery_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
  lottery_ms_migrations:
    #
    # Users Microservice Migrations
    #
    build: ./mmiab-lottery
    env_file:
      - lottery_ms.conf
    environment:
      - POSTGRES_HOST=lottery_db
    restart: on-failure
    command: flask db upgrade
    depends_on:
      lottery_db:
        condition: service_healthy
  lottery_ms_worker:
     #
     # Users Microservice Worker node
     #
    build: ./mmiab-lottery
    restart: on-failure
    volumes:
      - ./mmiab-lottery:/app 
    env_file:
      - lottery_ms.conf
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=lottery_db
    # - FLASK_ENV=development
    depends_on: 
      - lottery_ms_migrations
      - lottery_db
  lottery_bg:
    depends_on:
      - redis
      - lottery_ms_worker
      - lottery_db
    build: ./mmiab-lottery
    env_file:
      - lottery_ms.conf
    environment:
      - POSTGRES_HOST=lottery_db
      - REDIS_HOST=redis
    command: python3 -u subscribers.py
    links:
      - redis
  celery-lottery:
    depends_on:
        - redis
        - redis-celery-lottery
        - lottery_ms_worker
        - lottery_db
        - lottery_ms_migrations
        
    build: ./mmiab-lottery
    restart: always
    volumes:
      - ./mmiab-lottery:/app
    command: celery -A mib.background worker -B --loglevel=info
    env_file:
      - lottery_ms.conf
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=lottery_db
      - CELERY_REDIS_HOST=redis-celery-lottery
      - CELERY_REDIS_PORT=6380
    # - FLASK_ENV=development
    links:
        -  redis

  redis-celery-lottery:
    image: "redis:alpine"
    command: --port 6380
    ports:
      - "6380:6380"

  # -------------------------------------------- #
  # Message Microservice                    #
  # -------------------------------------------- #
  messages_db:
    image: postgres:13
    restart: unless-stopped
#   ports:
#     # this is only for development purpose
#     - "5345:5345"
    env_file:
     - messages_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  messages_ms_migrations:
    #
    # Users Microservice Migrations
    #
    build: ./mmiab-message
    env_file:
      - messages_ms.conf
    environment:
      - POSTGRES_HOST=messages_db
    restart: on-failure
    command: flask db upgrade
    depends_on:
      messages_db:
        condition: service_healthy
   
  messages_ms_worker:
   #
   # Users Microservice Worker node
   #
   build: ./mmiab-message
   restart: on-failure
   volumes:
     - ./mmiab-message:/app
     - ./mmiab-message/mib/static:/static
     - /etc/localtime:/etc/localtime:ro
   env_file:
     - messages_ms.conf
   environment:
     - REDIS_HOST=redis
     - POSTGRES_HOST=messages_db
     - USERS_MS_HOST=users_ms_worker
     - NOTIFICATIONS_MS_HOST=notifications_ms_worker
   # - FLASK_ENV=development
  messages_bg:
   depends_on:
     - redis
     - messages_ms_worker
     - messages_db
   build: ./mmiab-message
   env_file:
     - messages_ms.conf
   environment:
     - POSTGRES_HOST=messages_db
     - REDIS_HOST=redis
   command: python3 -u subscribers.py
   links:
     - redis
  celery-messages:
   depends_on:
       - redis 
       - messages_db
       - redis-celery-messages
       - messages_ms_worker
       - messages_ms_migrations

   build: ./mmiab-message
   restart: always
   volumes:
     - ./mmiab-message:/app
     - /etc/localtime:/etc/localtime:ro
   command: celery -A mib.background worker -B --loglevel=info
   env_file:
     - messages_ms.conf
   environment:
     - REDIS_HOST=redis
     - POSTGRES_HOST=messages_db
     - CELERY_REDIS_HOST=redis-celery-messages
     - CELERY_REDIS_PORT=6381
   # - FLASK_ENV=development
   links:
       -  redis
  redis-celery-messages:
   image: "redis:alpine"
   command: --port 6381
   ports:
     - "6381:6381"
# Specify here your microservices
# separating services by: db_service, migration_service, worker_service
#

volumes:
  # -------------------------------------------- #
  # Volumes                                      #
  # -------------------------------------------- #


  nginx_conf:
  # Nginx configuration volume

  static_contents:
  # API Gateway static content volume
