#
# University of Pisa - Advanced Software Engineering - 2021-2022
# Main docker-compose File
# Project:
#┌─────────────────────────────────────────────────────────────────────────────────────────┐ 
#│  __  __                                  _                 ____        _   _   _        │ 
#│ |  \/  | ___  ___ ___  __ _  __ _  ___  (_)_ __     __ _  | __ )  ___ | |_| |_| | ___   │
#│ | |\/| |/ _ \/ __/ __|/ _` |/ _` |/ _ \ | | '_ \   / _` | |  _ \ / _ \| __| __| |/ _ \  │
#│ | |  | |  __/\__ \__ \ (_| | (_| |  __/ | | | | | | (_| | | |_) | (_) | |_| |_| |  __/  │ 
#│ |_|  |_|\___||___/___/\__,_|\__, |\___| |_|_| |_|  \__,_| |____/ \___/ \__|\__|_|\___|  │ 
#│                              |___/                                                      │ 
#└─────────────────────────────────────────────────────────────────────────────────────────┘

version: '3.8'

services:
  
  # -------------------------------------------- #
  # Starting with API Gateway and Load Balancer  #
  # -------------------------------------------- #
 
  nginx_lb_orchestrator:
    #
    # Nginx Orchestrator instance
    #
    container_name: load_balancer_orchestrator
    restart: always
    build: ./mib-api-gateway/nginx-orchestrator
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # WARNING: with Winzozz it does not work, but we need it!
      - nginx_conf:/etc/nginx/conf.d

  nginx_lb:
    #
    # Nginx single instance
    #
    container_name: load_balancer
    restart: always
    build: ./mib-api-gateway/nginx
    labels:
      - mib.nginx_lb
    volumes:
      - nginx_conf:/etc/nginx/conf.d
      - static_contents:/static
    ports:
      - "80:80"

  api_gateway:
    #
    # API Gateway
    #
    # ! ! ! WARNING ! ! !
    # DO NOT set the container_name attribute and ports mapping
    # to allow the replication.
    #
    restart: always
    build: ./mib-api-gateway
    volumes:
      - static_contents:/static
    env_file:
      - gateway.conf
    environment:
      - USERS_MS_HOST=users_ms_worker
    labels:
      - mib.api_gateway_worker

  # -------------------------------------------- #
  # Common Services                              #
  # -------------------------------------------- #
  
  #
  # specify here the common services between your
  # microservices
  #


  # -------------------------------------------- #
  # Users Microservice                           #
  # -------------------------------------------- #
  users_ms_db:
    #
    # Users Microservice Database
    #
    image: library/postgres:10
    restart: on-failure
    env_file:
      - users_ms.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  users_ms_migrations:
    #
    # Users Microservice Migrations
    #
    build: ./mib-user
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_ms_db
    restart: on-failure
    command: flask db upgrade
    depends_on:
      users_ms_db:
        condition: service_healthy

  users_ms_worker:
    #
    # Users Microservice Worker node
    #
    build: ./mib-user
    restart: on-failure
    env_file:
      - users_ms.conf
    environment:
      - POSTGRES_HOST=users_ms_db
    depends_on:
      users_ms_db:
        condition: service_healthy
      users_ms_migrations:
        condition: service_started
  
  #
  # Specify here your microservices
  # separating services by: db_service, migration_service, worker_service
  #

volumes:
  # -------------------------------------------- #
  # Volumes                                      #
  # -------------------------------------------- #

  nginx_conf:
  # Nginx configuration volume

  static_contents:
  # API Gateway static content volume
